{{- if and .Values.components.mcpGateway.enabled }}
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: mcpservers.mcp.kagenti.com
spec:
  group: mcp.kagenti.com
  names:
    kind: MCPServer
    listKind: MCPServerList
    plural: mcpservers
    singular: mcpserver
    shortNames:
    - mcpsrv
  scope: Namespaced
  versions:
  - name: v1alpha1
    served: true
    storage: true
    subresources:
      status: {}
    additionalPrinterColumns:
    - name: Ready
      type: string
      jsonPath: .status.conditions[?(@.type=='Ready')].status
    - name: Targets
      type: string
      jsonPath: .spec.targetRefs[*].name
    - name: Prefix
      type: string
      jsonPath: .spec.toolPrefix
    - name: Age
      type: date
      jsonPath: .metadata.creationTimestamp
    schema:
      openAPIV3Schema:
        type: object
        description: MCPServer defines a collection of MCP (Model Context Protocol) servers to be aggregated by the gateway. It enables discovery and federation of tools from multiple backend MCP servers through HTTPRoute references.
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            description: Spec defines the desired state of the MCPServer resource
            required:
            - targetRef
            properties:
              targetRef:
                type: object
                description: TargetRef specifies an HTTPRoute that points to a backend MCP server
                required:
                - group
                - kind
                - name
                properties:
                  group:
                    type: string
                    default: gateway.networking.k8s.io
                    enum:
                    - gateway.networking.k8s.io
                    description: Group of the target resource
                  kind:
                    type: string
                    default: HTTPRoute
                    enum:
                    - HTTPRoute
                    description: Kind of the target resource
                  name:
                    type: string
                    description: Name of the HTTPRoute
                  namespace:
                    type: string
                    description: Namespace of the HTTPRoute (optional, defaults to same namespace)
              toolPrefix:
                type: string
                description: ToolPrefix is the prefix to add to all federated tools from referenced servers. This helps avoid naming conflicts when aggregating tools from multiple sources.
          status:
            type: object
            description: Status represents the observed state of the MCPServer resource
            properties:
              conditions:
                type: array
                description: Conditions represent the latest available observations of the MCPServer's state
                items:
                  type: object
                  required:
                  - type
                  - status
                  properties:
                    type:
                      type: string
                    status:
                      type: string
                    reason:
                      type: string
                    message:
                      type: string
                    lastTransitionTime:
                      type: string
                      format: date-time
---
apiVersion: v1
kind: Namespace
metadata:
  name: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
  labels:
    {{- include "kagenti.labels" . | nindent 4 }}
    istio-discovery: enabled
---
apiVersion: v1
kind: Namespace
metadata:
  name: "{{ .Values.mcpGateway.namespaces.gatewaySystem }}"
  labels:
    {{- include "kagenti.labels" . | nindent 4 }}
    istio-discovery: enabled
---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: mcp-gateway
  namespace:  "{{ .Values.mcpGateway.namespaces.gatewaySystem }}"
  labels:
    gateway-type: mcpgateway
  annotations:
    networking.istio.io/service-type: ClusterIP 
spec:
  gatewayClassName: istio
  listeners:
    - name: mcp # going to the Broker, and no hostname field
      port: 8080
      protocol: HTTP
      allowedRoutes:
        namespaces:
          from: All
    - name: mcps 
      hostname: '*.mcp.test.com' #public accessibly MCP host (doesn't need dns as it is for rewritten hosts)
      port: 8080
      protocol: HTTP
      allowedRoutes:
        namespaces:
          from: All
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: mcp-ext-proc
  namespace: "{{ .Values.istio.namespace }}"
spec:
  workloadSelector:
    labels:
      gateway-type: mcpgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: 'envoy.filters.network.http_connection_manager'
              subFilter:
                name: 'envoy.filters.http.router'
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.filters.http.ext_proc
          typed_config:
            '@type': 'type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor'
            failure_mode_allow: false
            mutation_rules:
              allow_all_routing: true
            message_timeout: 10s
            processing_mode:
              request_header_mode: 'SEND'
              response_header_mode: 'SEND'
              request_body_mode: 'BUFFERED'
              response_body_mode: 'BUFFERED'
              request_trailer_mode: 'SKIP'
              response_trailer_mode: 'SKIP'
            grpc_service:
              envoy_grpc:
                cluster_name: outbound|50051||mcp-broker.mcp-system.svc.cluster.local
---
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-broker-router
  namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-controller
  namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: mcp-controller
rules:
  - apiGroups: ["mcp.kagenti.com"]
    resources: ["mcpservers"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["mcp.kagenti.com"]
    resources: ["mcpservers/status"]
    verbs: ["get", "update", "patch"]
  - apiGroups: ["gateway.networking.k8s.io"]
    resources: ["httproutes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: mcp-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: mcp-controller
subjects:
  - kind: ServiceAccount
    name: mcp-controller
    namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mcp-broker-router
  namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["mcp-gateway-config"]
    verbs: ["get", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mcp-broker-router
  namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mcp-broker-router
subjects:
  - kind: ServiceAccount
    name: mcp-broker-router
    namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
---
apiVersion: v1
kind: Service
metadata:
  name: mcp-broker
  namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
spec:
  selector:
    app: mcp-broker-router
    component: broker-router
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: grpc
      port: 50051
      targetPort: 50051
      protocol: TCP
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-broker-router
  namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
  labels:
    app: mcp-broker-router
    component: broker-router
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mcp-broker-router
      component: broker-router
  template:
    metadata:
      labels:
        app: mcp-broker-router
        component: broker-router
    spec:
      serviceAccountName: mcp-broker-router
      volumes:
        - name: config-volume
          configMap:
            name: mcp-gateway-config
      containers:
        - name: mcp-broker-router
          image: ghcr.io/kagenti/mcp-gateway:v0.1
          imagePullPolicy: Always
          command:
            - ./mcp_gateway
            - --mcp-gateway-config=/config/config.yaml
            - --mcp-broker-public-address=0.0.0.0:8080
            - --mcp-router-address=0.0.0.0:50051
            - --log-level=-4  # info level
          volumeMounts:
            - name: config-volume
              mountPath: /config
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 50051
              protocol: TCP
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-controller
  namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
  labels:
    app: mcp-controller
    component: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mcp-controller
      component: controller
  template:
    metadata:
      labels:
        app: mcp-controller
        component: controller
    spec:
      serviceAccountName: mcp-controller
      containers:
        - name: mcp-controller
          image: ghcr.io/kagenti/mcp-gateway:v0.1
          imagePullPolicy: Always
          command:
            - ./mcp_gateway
            - --controller
            - --log-level=0  # info level
          ports:
            - name: health
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 8082
              protocol: TCP
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  namespace: "{{ .Values.mcpGateway.namespaces.mcpSystem }}"
  name: mcp-route
spec:
  parentRefs:
    - name: mcp-gateway
      namespace: gateway-system
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /mcp
      backendRefs:
        - name: mcp-broker
          port: 8080                   

{{- end }}